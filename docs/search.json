[
  {
    "objectID": "HW4.html",
    "href": "HW4.html",
    "title": "HW4",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n\n“../MyData.csv” this is due to “../” moving the reference up one level from your current directory so the reference would move from /homework/ to myfolder/ which houses MyData.csv\n\n\nWhat are the major benefits of using R projects?\n\n\nR projects keeps all of your files and R scripts in one directory, that way when you want to get back to where you left off you simply need to open the project to load all of the files associated with the project. If you simply saved the analysis you ran you would only be left with your environment, which would be confusing and would require you to rewrite your code from memory.\n\n\nWhat is git and what is github?\n\n\nIt is the difference between a software and a service with git being the software and github the service. Specifically, git is a version control software, that helps users by keeping track of all the files in a folder. While github creates a repository that that can be remotely tracked by git, and allow the user to decide when to upload/add (commit) changes to files and new files to the repo. Additionally, other users can modify the repo by pulling the files in the repo to their own computer then pushing the changes they made to the repo. In summary git is the software that allows you to interact with the online repository that github provides.\n\n\nWhat are the two main differences between a tibble and a data.frame?\n\n\nA tibble is a type of data frame that has an extra class added to it in the form of tbl_df which goes along with the class data.frame that a normal data frame in R has. This leads to two main differences the first being printing; when printing a tibble only the first ten rows and all columns. The second difference is that subsetting is stricter with tibbles as [ will only return another tibble, in a data frame [ can return data frames and vectors.\n\n5.Rewrite the following nested function call using Base R’s chaining operator:\n\narrange(filter(select(as_tibble(iris), starts_with(“Petal”), Species), Petal.Length &lt; 1.55), Species)\n\n\nlibrary(tidyverse) #loading in tidyverse package\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\narrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species), Petal.Length &lt; \n1.55), Species) #checking how original code outputs\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows\n\n\n\nRewriting the nested function call using Base R’s pipe\n\n\niris &lt;- data.frame(iris)\n\niris |&gt;\n  as_tibble() |&gt;\n  select(starts_with(\"Petal\"), Species) |&gt;\n  filter(Petal.Length &lt; 1.55) |&gt;\n  arrange(Species)\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows"
  },
  {
    "objectID": "HW4.html#task-1-conceptual-questions",
    "href": "HW4.html#task-1-conceptual-questions",
    "title": "HW4",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n\n“../MyData.csv” this is due to “../” moving the reference up one level from your current directory so the reference would move from /homework/ to myfolder/ which houses MyData.csv\n\n\nWhat are the major benefits of using R projects?\n\n\nR projects keeps all of your files and R scripts in one directory, that way when you want to get back to where you left off you simply need to open the project to load all of the files associated with the project. If you simply saved the analysis you ran you would only be left with your environment, which would be confusing and would require you to rewrite your code from memory.\n\n\nWhat is git and what is github?\n\n\nIt is the difference between a software and a service with git being the software and github the service. Specifically, git is a version control software, that helps users by keeping track of all the files in a folder. While github creates a repository that that can be remotely tracked by git, and allow the user to decide when to upload/add (commit) changes to files and new files to the repo. Additionally, other users can modify the repo by pulling the files in the repo to their own computer then pushing the changes they made to the repo. In summary git is the software that allows you to interact with the online repository that github provides.\n\n\nWhat are the two main differences between a tibble and a data.frame?\n\n\nA tibble is a type of data frame that has an extra class added to it in the form of tbl_df which goes along with the class data.frame that a normal data frame in R has. This leads to two main differences the first being printing; when printing a tibble only the first ten rows and all columns. The second difference is that subsetting is stricter with tibbles as [ will only return another tibble, in a data frame [ can return data frames and vectors.\n\n5.Rewrite the following nested function call using Base R’s chaining operator:\n\narrange(filter(select(as_tibble(iris), starts_with(“Petal”), Species), Petal.Length &lt; 1.55), Species)\n\n\nlibrary(tidyverse) #loading in tidyverse package\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\narrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species), Petal.Length &lt; \n1.55), Species) #checking how original code outputs\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows\n\n\n\nRewriting the nested function call using Base R’s pipe\n\n\niris &lt;- data.frame(iris)\n\niris |&gt;\n  as_tibble() |&gt;\n  select(starts_with(\"Petal\"), Species) |&gt;\n  filter(Petal.Length &lt; 1.55) |&gt;\n  arrange(Species)\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows"
  },
  {
    "objectID": "HW4.html#task-2-reading-delimited-data",
    "href": "HW4.html#task-2-reading-delimited-data",
    "title": "HW4",
    "section": "Task 2 Reading Delimited Data",
    "text": "Task 2 Reading Delimited Data\n\nGlass Data\nReading in glass.data directly into R using the read_csv() function\n\nglass &lt;- read_csv(\"https://www4.stat.ncsu.edu/online/datasets/glass.data\", col_names = FALSE)\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nGiving glass column names and using the mutate() function to make Type_of_Glass into a character observation\n\nglass &lt;- glass |&gt; #renaming unnamed columns to variables provided in HW\n  rename(\n    \"Id\" = 1,\n    \"RI\" = 2,\n    \"Na\" = 3,\n    \"Mg\" = 4,\n    \"Al\" = 5,\n    \"Si\" = 6,\n    \"K\" = 7,\n    \"Ca\" = 8,\n    \"Ba\" = 9,\n    \"Fe\" = 10,\n    \"Type_of_Glass\" = 11\n    ) |&gt; # turning numeric values in Type_of_Glass into character values\n  mutate(\n    Type_of_Glass = \n    ifelse(Type_of_Glass == 1, \"building_windows_float_processed\",\n    ifelse(Type_of_Glass == 2, \"building_windows_non_float_processed\",\n    ifelse(Type_of_Glass == 3, \"vehicle_windows_float_processed\",\n    ifelse(Type_of_Glass == 5, \"containers\",\n    ifelse(Type_of_Glass == 6, \"tableware\",\n    ifelse(Type_of_Glass == 7, \"headlamps\", \"Error\"))))))\n  ) |&gt; # filtering out observations where Fe &gt; 0.2 and Type_of_Glass is not tableware or headlamps\n  filter(Fe &lt; 0.2, Type_of_Glass %in% c(\"tableware\", \"headlamps\")) \n\nprint(glass, n = 214)\n\n# A tibble: 38 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_Glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;        \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0     0    tableware    \n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0     0    tableware    \n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0     0    tableware    \n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0     0    tableware    \n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0     0    tableware    \n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0     0    tableware    \n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0     0    tableware    \n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0     0    tableware    \n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0     0    tableware    \n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19  0    headlamps    \n11   187  1.52  14.3  3.26  2.22  71.2  1.46  5.79  1.63  0    headlamps    \n12   188  1.52  13.4  3.34  1.23  72.4  0.6   8.83  0     0    headlamps    \n13   189  1.52  14.9  2.2   2.06  70.3  0.76  9.76  0     0    headlamps    \n14   190  1.52  15.8  1.83  1.31  70.4  0.31  8.61  1.68  0    headlamps    \n15   191  1.52  13.9  1.78  1.79  73.1  0     8.67  0.76  0    headlamps    \n16   192  1.52  14.8  0     2.38  73.3  0     8.76  0.64  0.09 headlamps    \n17   193  1.52  14.2  0     2.79  73.5  0.04  9.04  0.4   0.09 headlamps    \n18   194  1.52  14.8  0     2     73.0  0     8.53  1.59  0.08 headlamps    \n19   195  1.52  14.6  0     1.98  73.3  0     8.52  1.57  0.07 headlamps    \n20   196  1.52  14.1  0     2.68  73.4  0.08  9.07  0.61  0.05 headlamps    \n21   197  1.52  13.9  0     2.54  73.2  0.14  9.41  0.81  0.01 headlamps    \n22   198  1.52  14.7  0     2.34  73.3  0     8.95  0.66  0    headlamps    \n23   199  1.52  14.4  0     2.66  73.1  0.04  9.08  0.64  0    headlamps    \n24   200  1.52  15.0  0     2.51  73.0  0.05  8.83  0.53  0    headlamps    \n25   201  1.52  15.2  0     2.25  73.5  0     8.34  0.63  0    headlamps    \n26   202  1.52  12.0  0     1.19  75.2  2.7   8.93  0     0    headlamps    \n27   203  1.52  14.8  0     2.42  73.7  0     8.39  0.56  0    headlamps    \n28   204  1.52  14.8  0     1.99  73.1  0     8.28  1.71  0    headlamps    \n29   205  1.52  15.0  0     2.27  73.3  0     8.71  0.67  0    headlamps    \n30   206  1.52  15.0  0     1.8   73.0  0     8.61  1.55  0    headlamps    \n31   207  1.52  14.9  0     1.87  73.1  0     8.67  1.38  0    headlamps    \n32   208  1.52  14.4  0     1.82  72.9  1.41  6.47  2.88  0    headlamps    \n33   209  1.52  14.4  0     2.74  72.8  0     9.45  0.54  0    headlamps    \n34   210  1.52  14.1  0     2.88  72.6  0.08  9.18  1.06  0    headlamps    \n35   211  1.52  14.9  0     1.99  73.1  0     8.4   1.59  0    headlamps    \n36   212  1.52  14.4  0     2.02  73.4  0     8.44  1.64  0    headlamps    \n37   213  1.52  14.4  0     1.94  73.6  0     8.48  1.57  0    headlamps    \n38   214  1.52  14.2  0     2.08  73.4  0     8.62  1.67  0    headlamps    \n\n\n\n\nYeast Data\nReading in yeast.data using the read_table() function\n\nyeast &lt;- read_table(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\", col_names = FALSE)\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  X1 = col_character(),\n  X2 = col_double(),\n  X3 = col_double(),\n  X4 = col_double(),\n  X5 = col_double(),\n  X6 = col_double(),\n  X7 = col_double(),\n  X8 = col_double(),\n  X9 = col_double(),\n  X10 = col_character()\n)\n\nyeast\n\n# A tibble: 1,484 × 10\n   X1            X2    X3    X4    X5    X6    X7    X8    X9 X10  \n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\nGiving yeast column names\n\nyeast &lt;- yeast |&gt;\n  #renaming unnamed columns to variables provided in HW\n  rename(\n    \"seq_name\" = 1,\n    \"mcg\" = 2,\n    \"gvh\" = 3,\n    \"alm\" = 4,\n    \"mit\" = 5,\n    \"erl\" = 6,\n    \"pox\" = 7,\n    \"vac\" = 8,\n    \"nuc\" = 9,\n    \"class\" = 10,\n    ) |&gt; #selecting classes then grouping by class to get mean and median by class\n  arrange(class) |&gt;\n  select(mcg, gvh, alm, mit, erl, pox, vac, class) |&gt;\n  group_by(class) |&gt;\n  summarize(\n    across(mcg:vac, list(mean = mean, median = median))\n  )\nyeast\n\n# A tibble: 10 × 15\n   class mcg_mean mcg_median gvh_mean gvh_median alm_mean alm_median mit_mean\n   &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1 CYT      0.481       0.48    0.470      0.46     0.535      0.53     0.227\n 2 ERL      0.792       0.78    0.772      0.8      0.482      0.5      0.336\n 3 EXC      0.735       0.77    0.717      0.73     0.493      0.49     0.292\n 4 ME1      0.789       0.78    0.757      0.73     0.376      0.365    0.312\n 5 ME2      0.722       0.76    0.603      0.59     0.415      0.41     0.283\n 6 ME3      0.431       0.43    0.490      0.49     0.364      0.36     0.213\n 7 MIT      0.521       0.51    0.533      0.53     0.517      0.52     0.404\n 8 NUC      0.452       0.45    0.456      0.46     0.529      0.53     0.228\n 9 POX      0.521       0.48    0.508      0.505    0.506      0.51     0.248\n10 VAC      0.548       0.56    0.526      0.505    0.465      0.495    0.201\n# ℹ 7 more variables: mit_median &lt;dbl&gt;, erl_mean &lt;dbl&gt;, erl_median &lt;dbl&gt;,\n#   pox_mean &lt;dbl&gt;, pox_median &lt;dbl&gt;, vac_mean &lt;dbl&gt;, vac_median &lt;dbl&gt;"
  },
  {
    "objectID": "HW4.html#task-2-combining-excel-and-delimited-data",
    "href": "HW4.html#task-2-combining-excel-and-delimited-data",
    "title": "HW4",
    "section": "Task 2: Combining Excel and Delimited Data",
    "text": "Task 2: Combining Excel and Delimited Data\nReading in white wine data set\n\nlibrary(readxl) #Loading in readxl package\n\nwhite &lt;- read_excel(\"white-wine.xlsx\")\nwhite\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nCorrecting backticks in variable names\n\nlibrary(janitor) #package that assist with making fixing names easier. I know this is \"wrong\" I just already did it before I read on for HW4\n\n\nAttaching package: 'janitor'\n\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\nwhite &lt;- white |&gt; \n  janitor::clean_names() |&gt;\n  rename(pH = p_h) #correcting clean_names() |&gt;\n  \n \nwhite\n\n# A tibble: 4,898 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nhad to do the mutate() seperately as it was not running correctly for some reason\n\nwhite &lt;- white |&gt;\n  mutate(wine_type = \"white_wine\")\nwhite\n\n# A tibble: 4,898 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\nReading in red wine data set using\n\nlibrary(readr)\n\nred &lt;- read_csv2(\"red-wine.csv\")\n\nℹ Using \"','\" as decimal and \"'.'\" as grouping mark. Use `read_delim()` for more control.\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 1599 Columns: 12\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (5): volatile acidity, citric acid, chlorides, density, sulphates\ndbl (2): total sulfur dioxide, quality\nnum (5): fixed acidity, residual sugar, free sulfur dioxide, pH, alcohol\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nred\n\n# A tibble: 1,599 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;                    &lt;dbl&gt; &lt;chr&gt;    \n 1              74 0.7                0                           19 0.076    \n 2              78 0.88               0                           26 0.098    \n 3              78 0.76               0.04                        23 0.092    \n 4             112 0.28               0.56                        19 0.075    \n 5              74 0.7                0                           19 0.076    \n 6              74 0.66               0                           18 0.075    \n 7              79 0.6                0.06                        16 0.069    \n 8              73 0.65               0                           12 0.065    \n 9              78 0.58               0.02                         2 0.073    \n10              75 0.5                0.36                        61 0.071    \n# ℹ 1,589 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;chr&gt;, pH &lt;dbl&gt;, sulphates &lt;chr&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nFixing column names\n\nred &lt;- red |&gt; \n  janitor::clean_names() |&gt;\n  rename(pH = p_h) #correcting clean_names()\n  \nred\n\n# A tibble: 1,599 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;    \n 1            74 0.7              0                       19 0.076    \n 2            78 0.88             0                       26 0.098    \n 3            78 0.76             0.04                    23 0.092    \n 4           112 0.28             0.56                    19 0.075    \n 5            74 0.7              0                       19 0.076    \n 6            74 0.66             0                       18 0.075    \n 7            79 0.6              0.06                    16 0.069    \n 8            73 0.65             0                       12 0.065    \n 9            78 0.58             0.02                     2 0.073    \n10            75 0.5              0.36                    61 0.071    \n# ℹ 1,589 more rows\n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;chr&gt;, pH &lt;dbl&gt;, sulphates &lt;chr&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nCreating new varible called wine_type\n\nred &lt;- red |&gt; #turning all columns into numeric\n    mutate_all(as.numeric) |&gt;\n    mutate(\n      wine_type = \"red_wine\"\n    )\nred\n\n# A tibble: 1,599 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1            74             0.7         0                19     0.076\n 2            78             0.88        0                26     0.098\n 3            78             0.76        0.04             23     0.092\n 4           112             0.28        0.56             19     0.075\n 5            74             0.7         0                19     0.076\n 6            74             0.66        0                18     0.075\n 7            79             0.6         0.06             16     0.069\n 8            73             0.65        0                12     0.065\n 9            78             0.58        0.02              2     0.073\n10            75             0.5         0.36             61     0.071\n# ℹ 1,589 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\nCombining both data sets\n\nred_white &lt;- bind_rows(list(white, red), .id = \"id\")\nred_white\n\n# A tibble: 6,497 × 14\n   id    fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n   &lt;chr&gt;         &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1 1                 7             0.27        0.36           20.7     0.045\n 2 1                63             0.3         0.34            1.6     0.049\n 3 1                81             0.28        0.4             6.9     0.05 \n 4 1                72             0.23        0.32            8.5     0.058\n 5 1                72             0.23        0.32            8.5     0.058\n 6 1                81             0.28        0.4             6.9     0.05 \n 7 1                62             0.32        0.16            7       0.045\n 8 1                 7             0.27        0.36           20.7     0.045\n 9 1                63             0.3         0.34            1.6     0.049\n10 1                81             0.22        0.43            1.5     0.044\n# ℹ 6,487 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\nCreating new chain to modify red_white to find high quality wines with a quality over 6.5 and alcohol less than 132\n\nred_white &lt;- red_white |&gt;\n  filter(quality &gt; 6.5 & alcohol &lt; 132) |&gt;\n  arrange(desc(quality)) |&gt;\n  select(citric_acid, alcohol, wine_type, quality) |&gt;\n  group_by(quality) |&gt;\n  mutate(\n    across(alcohol, list(mean = mean, standard_deviation = sd))\n  )\nred_white\n\n# A tibble: 1,198 × 6\n# Groups:   quality [3]\n   citric_acid alcohol wine_type  quality alcohol_mean alcohol_standard_deviat…¹\n         &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt;        &lt;dbl&gt;                     &lt;dbl&gt;\n 1        0.45     104 white_wine       9         122.                      10.1\n 2        0.29     124 white_wine       9         122.                      10.1\n 3        0.36     125 white_wine       9         122.                      10.1\n 4        0.34     127 white_wine       9         122.                      10.1\n 5        0.49     129 white_wine       9         122.                      10.1\n 6        0.48     128 white_wine       8         102.                      36.8\n 7        0.48     128 white_wine       8         102.                      36.8\n 8        0.42     105 white_wine       8         102.                      36.8\n 9        0.31     107 white_wine       8         102.                      36.8\n10        0.31     107 white_wine       8         102.                      36.8\n# ℹ 1,188 more rows\n# ℹ abbreviated name: ¹​alcohol_standard_deviation"
  }
]